name: Build

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  workflow_call:

jobs:
  # make a new version first, release or prerelease
  release:
    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup git user
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

    - uses: actions/setup-python@v4
      with:
        python-version: '{{ py_ver }}' # defined by py_ver in ci/bootstrap.py
        cache: pip
        cache-dependency-path: ci/requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --progress-bar=off -r ci/requirements.txt

    - name: Make some kind of release
      shell: sh
      run: |
        set -x
        # creates a release only if there are relevant changes/commits starting with 'fix/feat()'
        semantic-release publish -D version_source=commit \
          -D commit_author="${GITHUB_ACTOR} <${GITHUB_ACTOR}@users.noreply.github.com>"
        if [ -z "$(git tag --points-at HEAD)" ]; then
          # no release, no relevant changes, make prerelease tag
          semantic-release version -D version_source=tag --prerelease
        fi
        git tag
        git push
        git push --tags

  build:
    # defining this job separately allows to refer to it later
    # as job.needs dependency plus it provides a badge
    needs: [release]
    # convert this to a matrix if builds differ between platforms
    runs-on: {{'${{ matrix.os }}'}}
    strategy:
      matrix:
        os: ['ubuntu-latest']
    steps:

    - uses: actions/checkout@v3
    - name: Get latest tags
      run: |
        git pull --tags
        echo "git_tag_head='$(git tag --points-at HEAD)'" >> $GITHUB_ENV
        git tag --points-at HEAD
        echo "git_tag_head='$(git tag --points-at HEAD)'"
        git tag

    - uses: actions/setup-python@v4
      with:
        python-version: '{{ py_ver }}' # defined by py_ver in ci/bootstrap.py
        cache: pip
        cache-dependency-path: ci/requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --progress-bar=off -r ci/requirements.txt

    - name: Set version number
      if: {{"${{ ! env.git_tag_head }}"}}  # there is a tag at the latest commit
      shell: python
      run: |
        # modify source files to reflect the current version (relevant for pre-releases)
        from semantic_release.history import set_new_version, get_current_version
        cv = get_current_version()
        print(f"Setting current version '{cv}':", set_new_version(cv))

    - name: Build
      run: tox -e build -v

    - name: Upload package artifact for publishing job
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist/*.whl

    - name: Upload source artifact for publishing job
      # upload source package only once
      if: {{"${{ matrix.os == 'ubuntu-latest' }}"}}
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: dist/*.tar.gz

  publish:
    needs: [build]
    runs-on: 'ubuntu-latest'
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install --progress-bar=off -r ci/requirements.txt

    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: dist

    # - name: Publish package to TestPyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: {{'${{ secrets.TEST_PYPI_API_TOKEN }}'}}
    #     repository_url: https://test.pypi.org/legacy/

    - name: Check generated packages
      run: twine check dist/*.*

    - name: Upload packages
      env:
        TWINE_PASSWORD: {{'"${{ secrets.TEST_PYPI_TOKEN }}"'}}
      run: |
        twine upload -u __token__ -r testpypi dist/*.*
