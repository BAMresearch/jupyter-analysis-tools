name: Tests

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  URL_DOCS: {{ url_docs }}
  COV_REPORT_BASE_DIR: {{ cov_report_path }}

jobs:
  mytest:
    runs-on: 'ubuntu-latest'
    steps:
    - name: Test
      env:
        TEST_GITHUB_TOKEN: {{'${{ secrets.GITHUB_TOKEN }}'}}
        TEST_SECRET: {{'${{ secrets.PYPI_TEST_TOKEN }}'}}
      run: |
        echo {{'${#TEST_GITHUB_TOKEN}'}}
        echo {{'${#TEST_SECRET}'}}
  docs:
    # defining this job separately allows to refer to it later
    # as job.needs dependency plus it provides a badge
    uses: ./.github/workflows/docs.yml

  build:
    needs: [test]
    uses: ./.github/workflows/build.yml

  test:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python_arch: ['x64']
        python:
{% for env in tox_environments %}
{% set prefix = env.split('-')[0] %}
          - [{{prefix[2]}},{{prefix[3:]}}]
{% endfor %}
        #os: ['ubuntu', 'windows', 'macos']
        os: ['ubuntu']
    env:
      PYTHON: {{"${{ join(matrix.python, '.') }}"}} # e.g. '3.11'
      TOX_ENV: {{"${{ format('{0}{1}', 'py', join(matrix.python, '')) }}"}} # e.g. 'py311'
    runs-on: {{"${{ format('{0}-latest', matrix.os) }}"}}
    name: {{'"Test py-${{ join(matrix.python, \'.\') }} (${{ matrix.os }})"'}}
    steps:

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: {{ '${{ env.PYTHON }}' }}
        architecture: {{ '${{ matrix.python_arch }}' }}
        cache: pip
        cache-dependency-path: |
          ci/requirements.txt
          tests/requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --progress-bar=off -r ci/requirements.txt
        virtualenv --version
        pip --version
        tox --version
        pip list --format=freeze

    - name: Run tests
      run: tox -e {{'${{ env.TOX_ENV }}'}} -v

    - name: Rename coverage data uniquely
      run: {{ 'mv .coverage coverage.${{ env.TOX_ENV }}.${{ matrix.os }}' }}

    - name: Upload coverage data for next step
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage.*

  combine:
    name: Combine coverage data
    needs: [test, docs]
    runs-on: ubuntu-latest
    outputs:
      total: {{ '${{ steps.total.outputs.total }}' }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '{{ py_ver }}' # defined by py_ver in ci/bootstrap.py
          cache: pip
          cache-dependency-path: ci/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --progress-bar=off -r ci/requirements.txt

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage

      - name: Combine and report
        id: combine
        run: |
          set -x
          pwd && ls -la
          coverage combine coverage.*
          python3 -c 'import coverage,pprint; cov=coverage.Coverage(); cov.load();pprint.pprint(list(cov.get_data()._file_map.keys()))'
          coverage html --debug=pathmap

      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: html_report
          path: htmlcov

      - name: Get total
        id: total
        run: |
          echo "total=$(coverage report --format=total)" >> $GITHUB_OUTPUT

  publish:
    name: Publish coverage report
    needs: combine
    runs-on: ubuntu-latest

    steps:
      - name: Compute info for later steps
        id: info
        run: |
          set -xe
          export SHA10=$(echo {{ '${{ github.sha }}' }} | cut -c 1-10)
          export SLUG=$(date +'%Y%m%d')_$SHA10
          export REPORT_DIR=$COV_REPORT_BASE_DIR/$SLUG
          export REF={{'"${{ github.ref }}"'}}
          echo "total={{'${{ needs.combine.outputs.total }}'}}" >> $GITHUB_ENV
          echo "sha10=$SHA10" >> $GITHUB_ENV
          echo "slug=$SLUG" >> $GITHUB_ENV
          echo "report_dir=$REPORT_DIR" >> $GITHUB_ENV
          echo "branch=${REF#refs/heads/}" >> $GITHUB_ENV

      - name: Summarize
        run: |
          echo '### Total coverage: {{'${{ env.total }}'}}%' >> $GITHUB_STEP_SUMMARY

      - name: Checkout reports branch
        if: {{"${{ github.ref == 'refs/heads/main' }}"}}
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: pages

      - name: Download coverage HTML report
        if: {{"${{ github.ref == 'refs/heads/main' }}"}}
        uses: actions/download-artifact@v3
        with:
          name: html_report
          path: {{"pages/${{ env.report_dir }}"}}

      - name: Push to report repo
        if: {{"${{ github.ref == 'refs/heads/main' }}"}}
        env:
          COMMIT_MESSAGE: {{'${{ github.event.head_commit.message }}'}}
          REDIR_HTML: {{'"pages/${{ env.COV_REPORT_BASE_DIR }}/index.html"'}}
          BADGE_JSON: {{'"pages/${{ env.COV_REPORT_BASE_DIR }}/cov.json"'}}
          REPORT_URL: {{'"${{ env.URL_DOCS }}/${{ env.report_dir }}"'}}
        run: |
          set -xe
          # Make the redirect to the latest report.
          echo "<html><head>" > "$REDIR_HTML"
          echo "<meta http-equiv='refresh' content={{"'0;url=$REPORT_URL'"}} />" >> "$REDIR_HTML"
          echo "<body>Coverage report redirect..." >> "$REDIR_HTML"
          # Make the commit message.
          echo {{'"${{ env.total }}% - $COMMIT_MESSAGE"'}} > commit.txt
          echo "" >> commit.txt
          echo "$REPORT_URL" >> commit.txt
          echo {{'"${{ env.sha10 }}: ${{ env.branch }}"'}} >> commit.txt
          # Make badge json
          COL_MIN=10; COL_MAX=95;
          HUE=$(python3 -c "print(int(({{'${{ env.total }}'}} - $COL_MIN)/($COL_MAX - $COL_MIN) * 120))")
          echo "{\"schemaVersion\":1,\"label\":\"Coverage\",\"message\":\"{{'${{ env.total }}'}}%\",\"color\":\"hsl($HUE, 100%, 40%)\"}" >> "$BADGE_JSON"
          # Commit.
          cd ./pages
          rm {{'${{ env.report_dir }}/.gitignore'}}
          ls -la {{'${{ env.report_dir }}'}} # for debugging
          git sparse-checkout set --skip-checks '/*' {{"'${{ env.report_dir }}'"}}
          git add {{"${{ env.report_dir }}"}}/* "${REDIR_HTML#*/}" "${BADGE_JSON#*/}"
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git commit --file=../commit.txt
          git push
          echo {{'"[$REPORT_URL]($REPORT_URL)"'}} >> $GITHUB_STEP_SUMMARY
