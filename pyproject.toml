[project]
name = 'jupyter-analysis-tools'
description = 'Common Python helpers used in data analysis notebooks (.ipynb) with GIT'
authors = [{name = 'Ingo BreÃŸler', email = 'dev@ingobressler.net'}]
dynamic = ['version', 'readme']
license = {text = 'MIT License'}
classifiers = [
  'Development Status :: 4 - Beta',
  'License :: OSI Approved :: MIT License',
  'Operating System :: Unix',
  'Operating System :: POSIX',
  'Operating System :: MacOS',
  'Operating System :: Microsoft :: Windows',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: Implementation :: CPython',
  'Framework :: Jupyter :: JupyterLab',
  'Topic :: Utilities',
  'Topic :: Scientific/Engineering',
  'Intended Audience :: Developers',
  'Intended Audience :: Science/Research',
]

[project.urls]
homepage = "https://bamresearch.github.io/jupyter_analysis_tools"
documentation = "https://bamresearch.github.io/jupyter_analysis_tools"
repository = "https://github.com/BAMresearch/jupyter_analysis_tools"
changelog = "https://bamresearch.github.io/jupyter_analysis_tools/changelog.html"

[build-system]
requires = [
    "setuptools>=40.6",
    "wheel",
]
# check-manifest checks that, https://github.com/mgedmin/check-manifest/commit/c9df78
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ['src']
include = ['jupyter_analysis_tools*']

[tool.setuptools.dynamic]
version = {attr = 'jupyter_analysis_tools.__version__'}
readme = {file = ['README.rst', 'CHANGELOG.rst']}

[tool.coverage.report]
path = "coverage-report"

# on version numbers: https://peps.python.org/pep-0440/
# and bottom of https://softwareengineering.stackexchange.com/a/151558
[tool.semantic_release]
#major_on_zero = false # no major release when current major version is zero
version_variable = [                        # version location
    'src/jupyter_analysis_tools/__init__.py:__version__',
    'docs/conf.py:version',
]
version_source = "tag"
prerelease_tag = "dev"
branch = "main"                             # branch to make releases of
changelog_file = "CHANGELOG.rst"            # changelog file
build_command = "python3 -m build"          # build dists
upload_to_release = false                   # auto-create GitHub release
upload_to_pypi = false                      # don't auto-upload to PyPI
remove_dist = false                         # don't remove dists
#patch_without_tag = false                   # patch release by default

[tool.blue]
line-length = 100
target-version = ['py37']
skip-string-normalization = true

[tool.isort]
line_length = 100
group_by_package = true
known_first_party = 'jupyter_analysis_tools'
extend_skip = ["ci/templates", ".ipynb_checkpoints"]

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
github_url = "https://github.com/BAMresearch/jupyter_analysis_tools"

[tool.tbump.version]
current = "0.1.0"
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (\.
    (?P<extra>dev\d+)
    (\+
      (?P<ref>[0-9a-fA-F]+)
    )?
  )?
'''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
#[[tool.tbump.file]]
# src = "setup.py"
# search = "version='{current_version}'"

# [[tool.tbump.file]]
# src = "README.rst"
# search = "/v{current_version}.svg"
#
# [[tool.tbump.file]]
# src = "README.rst"
# search = "/v{current_version}...main"

[[tool.tbump.file]]
src = "docs/conf.py"
search = "version = '{current_version}'"

[[tool.tbump.file]]
src = "src/jupyter_analysis_tools/__init__.py"
search = "__version__ = '{current_version}'"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[tool.tbump.before_commit]]
name = "check changelog"
cmd = "grep -q {new_version} CHANGELOG.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
